commit b45864fa1d5b2edacf723047430cdb3e0680b950
Author: Paul Hammant <paul@hammant.org>
Date:   Sun Aug 11 13:06:41 2013 -0500

    add 'tbody' and 'nav'

diff --git a/src/main/java/org/seleniumhq/selenium/fluent/FluentWebDriver.java b/src/main/java/org/seleniumhq/selenium/fluent/FluentWebDriver.java
index a1fec07..93cf3b0 100644
--- a/src/main/java/org/seleniumhq/selenium/fluent/FluentWebDriver.java
+++ b/src/main/java/org/seleniumhq/selenium/fluent/FluentWebDriver.java
@@ -302,6 +302,45 @@ public class FluentWebDriver extends Internal.BaseFluentWebDriver {
     public FluentWebElements ps(By by) {
         return (FluentWebElements) super.ps(by);
     }
+    @Override
+    public FluentWebElement nav() {
+        return (FluentWebElement) super.nav();
+    }
+
+    @Override
+    public FluentWebElements navs() {
+        return (FluentWebElements) super.navs();
+    }
+
+    @Override
+    public FluentWebElement nav(By by) {
+        return (FluentWebElement) super.nav(by);
+    }
+
+    @Override
+    public FluentWebElements navs(By by) {
+        return (FluentWebElements) super.navs(by);
+    }
+
+    @Override
+    public FluentWebElement tbody() {
+        return (FluentWebElement) super.tbody();
+    }
+
+    @Override
+    public FluentWebElements tbodys() {
+        return (FluentWebElements) super.tbodys();
+    }
+
+    @Override
+    public FluentWebElement tbody(By by) {
+        return (FluentWebElement) super.tbody(by);
+    }
+
+    @Override
+    public FluentWebElements tbodys(By by) {
+        return (FluentWebElements) super.tbodys(by);
+    }
 
     @Override
     public FluentWebElement img() {
@@ -712,6 +751,24 @@ public class FluentWebDriver extends Internal.BaseFluentWebDriver {
             return returnBool(bfwd.p(by));
         }
 
+        public boolean nav() {
+            return returnBool(bfwd.nav());
+        }
+
+
+        public boolean nav(By by) {
+            return returnBool(bfwd.nav(by));
+        }
+
+        public boolean tbody() {
+            return returnBool(bfwd.tbody());
+        }
+
+
+        public boolean tbody(By by) {
+            return returnBool(bfwd.tbody(by));
+        }
+
         public boolean img() {
             return returnBool(bfwd.img());
         }
diff --git a/src/main/java/org/seleniumhq/selenium/fluent/FluentWebElement.java b/src/main/java/org/seleniumhq/selenium/fluent/FluentWebElement.java
index f8a04e1..640919d 100644
--- a/src/main/java/org/seleniumhq/selenium/fluent/FluentWebElement.java
+++ b/src/main/java/org/seleniumhq/selenium/fluent/FluentWebElement.java
@@ -613,6 +613,46 @@ public class FluentWebElement extends Internal.BaseFluentWebElement {
         return (FluentWebElements) super.ps(by);
     }
 
+    @Override
+    public FluentWebElement nav() {
+        return (FluentWebElement) super.nav();
+    }
+
+    @Override
+    public FluentWebElement nav(By by) {
+        return (FluentWebElement) super.nav(by);
+    }
+
+    @Override
+    public FluentWebElements navs() {
+        return (FluentWebElements) super.navs();
+    }
+
+    @Override
+    public FluentWebElements navs(By by) {
+        return (FluentWebElements) super.navs(by);
+    }
+
+    @Override
+    public FluentWebElement tbody() {
+        return (FluentWebElement) super.tbody();
+    }
+
+    @Override
+    public FluentWebElement tbody(By by) {
+        return (FluentWebElement) super.tbody(by);
+    }
+
+    @Override
+    public FluentWebElements tbodys() {
+        return (FluentWebElements) super.tbodys();
+    }
+
+    @Override
+    public FluentWebElements tbodys(By by) {
+        return (FluentWebElements) super.tbodys(by);
+    }
+
 
     public FluentWebDriver.BooleanResultsAdapter hasMissing() {
         return new FluentWebDriver.BooleanResultsAdapter(super.delegate, this.currentElement, super.monitor, super.context)
@@ -787,6 +827,24 @@ public class FluentWebElement extends Internal.BaseFluentWebElement {
             delegate.p(by);
         }
 
+        public void nav() {
+            delegate.nav();
+        }
+
+
+        public void nav(By by) {
+            delegate.nav(by);
+        }
+
+        public void tbody() {
+            delegate.tbody();
+        }
+
+
+        public void tbody(By by) {
+            delegate.tbody(by);
+        }
+
 
         public void img() {
             delegate.img();
diff --git a/src/main/java/org/seleniumhq/selenium/fluent/Internal.java b/src/main/java/org/seleniumhq/selenium/fluent/Internal.java
index 6e819fb..7d8d663 100644
--- a/src/main/java/org/seleniumhq/selenium/fluent/Internal.java
+++ b/src/main/java/org/seleniumhq/selenium/fluent/Internal.java
@@ -277,6 +277,41 @@ public class Internal {
         protected BaseFluentWebElements ps(By by) {
             return newFluentWebElements(multiple(by, "p"));
         }
+        protected BaseFluentWebElement nav() {
+            SingleResult single = single(tagName("nav"), "nav");
+            return newFluentWebElement(delegate, single.getResult(), single.getCtx());
+        }
+
+        protected BaseFluentWebElements navs() {
+            return newFluentWebElements(multiple(tagName("nav"), "nav"));
+        }
+
+        protected BaseFluentWebElement nav(By by) {
+            SingleResult single = single(by, "nav");
+            return newFluentWebElement(delegate, single.getResult(), single.getCtx());
+        }
+
+        protected BaseFluentWebElements navs(By by) {
+            return newFluentWebElements(multiple(by, "nav"));
+        }
+
+        protected BaseFluentWebElement tbody() {
+            SingleResult single = single(tagName("tbody"), "tbody");
+            return newFluentWebElement(delegate, single.getResult(), single.getCtx());
+        }
+
+        protected BaseFluentWebElements tbodys() {
+            return newFluentWebElements(multiple(tagName("tbody"), "tbody"));
+        }
+
+        protected BaseFluentWebElement tbody(By by) {
+            SingleResult single = single(by, "tbody");
+            return newFluentWebElement(delegate, single.getResult(), single.getCtx());
+        }
+
+        protected BaseFluentWebElements tbodys(By by) {
+            return newFluentWebElements(multiple(by, "tbody"));
+        }
 
         protected BaseFluentWebElement img() {
             SingleResult single = single(tagName("img"), "img");
diff --git a/src/main/java/org/seleniumhq/selenium/fluent/internal/NegatingFluentWebDriver.java b/src/main/java/org/seleniumhq/selenium/fluent/internal/NegatingFluentWebDriver.java
index 31ec6d1..faff2ce 100644
--- a/src/main/java/org/seleniumhq/selenium/fluent/internal/NegatingFluentWebDriver.java
+++ b/src/main/java/org/seleniumhq/selenium/fluent/internal/NegatingFluentWebDriver.java
@@ -114,6 +114,24 @@ public class NegatingFluentWebDriver {
         delegate.p(by);
     }
 
+    public void nav() {
+        delegate.nav();
+    }
+
+
+    public void nav(By by) {
+        delegate.nav(by);
+    }
+
+    public void tbody() {
+        delegate.tbody();
+    }
+
+
+    public void tbody(By by) {
+        delegate.tbody(by);
+    }
+
     public void img() {
         delegate.img();
     }
diff --git a/src/test/java/org/seleniumhq/selenium/fluent/elements/nav.java b/src/test/java/org/seleniumhq/selenium/fluent/elements/nav.java
new file mode 100644
index 0000000..b427e4c
--- /dev/null
+++ b/src/test/java/org/seleniumhq/selenium/fluent/elements/nav.java
@@ -0,0 +1,63 @@
+package org.seleniumhq.selenium.fluent.elements;
+
+import org.junit.Test;
+import org.openqa.selenium.By;
+import org.seleniumhq.selenium.fluent.BaseTest;
+import org.seleniumhq.selenium.fluent.FluentExecutionStopped;
+import org.seleniumhq.selenium.fluent.FluentWebElements;
+
+import static org.hamcrest.CoreMatchers.equalTo;
+import static org.hamcrest.CoreMatchers.notNullValue;
+import static org.junit.Assert.assertThat;
+import static org.junit.Assert.fail;
+import static org.mockito.Mockito.when;
+
+public class nav extends BaseTest {
+
+    @Test
+    public void nav_functionality() {
+
+        setupExpecations("nav");
+
+        FluentWebElements fe = fwd.nav()
+                .nav(By.xpath("@foo = 'bar'"))
+                .nav(By.cssSelector("baz"))
+                .navs();
+
+        assertThat(fe, notNullValue());
+        verifications("nav");
+    }
+
+    @Test
+    public void navs_functionality() {
+
+        setupExpecations2("nav");
+
+        FluentWebElements fe = fwd.nav()
+                .navs(By.name("qux"));
+
+        assertThat(fe, notNullValue());
+
+        verifications2("nav");
+
+    }
+
+    @Test
+    public void nav_mismatched() {
+
+        when(wd.findElement(By.linkText("mismatching_tag_name"))).thenReturn(we);
+        when(we.getTagName()).thenReturn("boo");
+
+        try {
+            fwd.nav(By.linkText("mismatching_tag_name"))
+                    .clearField();
+            fail("should have barfed");
+        } catch (FluentExecutionStopped e) {
+            assertThat(e.getMessage(), equalTo("AssertionError during invocation of: ?.nav(By.linkText: mismatching_tag_name)"));
+            assertThat(e.getCause().getMessage(), equalTo("tag was incorrect, should have been nav but was boo"));
+        }
+
+    }
+
+
+}
diff --git a/src/test/java/org/seleniumhq/selenium/fluent/elements/tbody.java b/src/test/java/org/seleniumhq/selenium/fluent/elements/tbody.java
new file mode 100644
index 0000000..cccaadd
--- /dev/null
+++ b/src/test/java/org/seleniumhq/selenium/fluent/elements/tbody.java
@@ -0,0 +1,63 @@
+package org.seleniumhq.selenium.fluent.elements;
+
+import org.junit.Test;
+import org.openqa.selenium.By;
+import org.seleniumhq.selenium.fluent.BaseTest;
+import org.seleniumhq.selenium.fluent.FluentExecutionStopped;
+import org.seleniumhq.selenium.fluent.FluentWebElements;
+
+import static org.hamcrest.CoreMatchers.equalTo;
+import static org.hamcrest.CoreMatchers.notNullValue;
+import static org.junit.Assert.assertThat;
+import static org.junit.Assert.fail;
+import static org.mockito.Mockito.when;
+
+public class tbody extends BaseTest {
+
+    @Test
+    public void tbody_functionality() {
+
+        setupExpecations("tbody");
+
+        FluentWebElements fe = fwd.tbody()
+                .tbody(By.xpath("@foo = 'bar'"))
+                .tbody(By.cssSelector("baz"))
+                .tbodys();
+
+        assertThat(fe, notNullValue());
+        verifications("tbody");
+    }
+
+    @Test
+    public void adresss_functionality() {
+
+        setupExpecations2("tbody");
+
+        FluentWebElements fe = fwd.tbody()
+                .tbodys(By.name("qux"));
+
+        assertThat(fe, notNullValue());
+
+        verifications2("tbody");
+
+    }
+
+    @Test
+    public void tbody_mismatched() {
+
+        when(wd.findElement(By.linkText("mismatching_tag_name"))).thenReturn(we);
+        when(we.getTagName()).thenReturn("boo");
+
+        try {
+            fwd.tbody(By.linkText("mismatching_tag_name"))
+                    .clearField();
+            fail("should have barfed");
+        } catch (FluentExecutionStopped e) {
+            assertThat(e.getMessage(), equalTo("AssertionError during invocation of: ?.tbody(By.linkText: mismatching_tag_name)"));
+            assertThat(e.getCause().getMessage(), equalTo("tag was incorrect, should have been tbody but was boo"));
+        }
+
+    }
+
+
+}
diff --git a/src/test/java/org/seleniumhq/selenium/fluent/internal/NegatingFluentWebDriverTest.java b/src/test/java/org/seleniumhq/selenium/fluent/internal/NegatingFluentWebDriverTest.java
index 5121639..28f4c62 100644
--- a/src/test/java/org/seleniumhq/selenium/fluent/internal/NegatingFluentWebDriverTest.java
+++ b/src/test/java/org/seleniumhq/selenium/fluent/internal/NegatingFluentWebDriverTest.java
@@ -119,6 +119,22 @@ public class NegatingFluentWebDriverTest {
     }
 
     @Test
+    public void testnav() throws Exception {
+        when(wd.findElement(tagName("nav"))).thenThrow(new NotFoundException());
+        nfwd.nav();
+        when(wd.findElement(BYID)).thenThrow(new NotFoundException());
+        nfwd.nav(BYID);
+    }
+
+    @Test
+    public void testtbody() throws Exception {
+        when(wd.findElement(tagName("tbody"))).thenThrow(new NotFoundException());
+        nfwd.tbody();
+        when(wd.findElement(BYID)).thenThrow(new NotFoundException());
+        nfwd.tbody(BYID);
+    }
+
+    @Test
     public void testImg() throws Exception {
         when(wd.findElement(tagName("img"))).thenThrow(new NotFoundException());
         nfwd.img();
